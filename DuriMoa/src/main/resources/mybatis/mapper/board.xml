<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ugi.durimoa.board.dao.IBoardDAO">

	<insert id="boardAdd" parameterType="BoardVO" useGeneratedKeys="true" keyProperty="brdId" keyColumn="brd_id">
		INSERT INTO BOARD(mem_id, trv_id, brd_tt, brd_ct) 
		VALUES (#{memId}, #{trvId}, #{brdTt}, #{brdCt})
	</insert> 
	
	<update id="boardUpdate" parameterType="BoardVO">
		UPDATE board
		SET brd_tt = #{brdTt},
			brd_ct = #{brdCt}
		WHERE brd_id = #{brdId}
	</update>
	
	<select id="getBoardList" resultType="BoardInfoVO" parameterType="String">
		SELECT 
		    a.*, 
		    SUBSTR(c.trv_pc, 0, 2) AS trv_plc, 
		    c.trv_pc, 
		    b.brd_img AS brdImg1,
		    NVL(d.like_yn, 'N') AS likeYn,
		    (SELECT COUNT(*) 
		     FROM likes 
		     WHERE likes.brd_id = a.brd_id 
		     AND likes.like_yn = 'Y') AS cnt
		FROM 
		    board a
		JOIN 
		    board_img b ON a.brd_id = b.brd_id
		JOIN 
		    travel c ON a.trv_id = c.trv_id
		LEFT JOIN 
		    likes d ON a.brd_id = d.brd_id AND d.mem_id = #{memId}
		WHERE 
		    b.brd_idx = '1'
	</select>
	
	<select id="getBoardSearch" resultType="BoardInfoVO" parameterType="SearchVO">
    SELECT 
        a.*, 
        SUBSTR(c.trv_pc, 0, 2) AS trv_plc, 
        c.trv_pc, 
        b.brd_img AS brdImg1,
        NVL((SELECT d.like_yn 
             FROM likes d 
             WHERE d.brd_id = a.brd_id AND d.mem_id = #{memId}), 'N') AS likeYn,  -- 좋아요 여부
        (SELECT COUNT(*) 
         FROM likes 
         WHERE likes.brd_id = a.brd_id AND likes.like_yn = 'Y') AS cnt  -- 전체 좋아요 수
    FROM 
        board a
    JOIN 
        board_img b ON a.brd_id = b.brd_id
    JOIN 
        travel c ON a.trv_id = c.trv_id
    WHERE 
        b.brd_idx = '1'
        AND (#{keyWord} IS NULL OR a.brd_tt LIKE '%' || #{keyWord} || '%' OR c.trv_pc LIKE '%' || #{keyWord} || '%')
	</select>
	
	<select id="getMyBoardSearch" resultType="BoardInfoVO" parameterType="SearchVO">
	    SELECT 
	        a.*, 
	        SUBSTR(c.trv_pc, 0, 2) AS trv_plc, 
	        c.trv_pc, 
	        b.brd_img AS brdImg1,
	        NVL((SELECT d.like_yn 
	             FROM likes d 
	             WHERE d.brd_id = a.brd_id AND d.mem_id = #{memId}), 'N') AS likeYn,  -- 좋아요 여부
	        (SELECT COUNT(*) 
	         FROM likes 
	         WHERE likes.brd_id = a.brd_id AND likes.like_yn = 'Y') AS cnt  -- 전체 좋아요 수
	    FROM 
	        board a
	    JOIN 
	        board_img b ON a.brd_id = b.brd_id
	    JOIN 
	        travel c ON a.trv_id = c.trv_id
	    WHERE 
	        b.brd_idx = '1'
	        AND (#{keyWord} IS NULL OR a.brd_tt LIKE '%' || #{keyWord} || '%' OR c.trv_pc LIKE '%' || #{keyWord} || '%')
	        AND a.mem_id = #{memId}
	</select>
	
	<select id="myBoard" resultType="BoardInfoVO" parameterType="String">
		SELECT 
		    a.*, 
		    SUBSTR(c.trv_pc, 0, 2) AS trv_plc, 
		    c.trv_pc, 
		    b.brd_img AS brdImg1,
		    NVL((SELECT d.like_yn 
		         FROM likes d 
		         WHERE d.brd_id = a.brd_id AND d.mem_id = #{memId}), 'N') AS likeYn,  -- 좋아요 여부
		    (SELECT COUNT(*) 
		     FROM likes 
		     WHERE likes.brd_id = a.brd_id AND likes.like_yn = 'Y') AS cnt  -- 전체 좋아요 수
		FROM 
		    board a, 
		    board_img b, 
		    travel c
		WHERE 
		    a.brd_id = b.brd_id
		    AND a.trv_id = c.trv_id
		    AND b.brd_idx = '1'
		    AND a.mem_id = #{memId}
	</select>
	
	<select id="getBoard" resultType="BoardInfoVO" parameterType="int">
		SELECT 
	    T.trv_pc,
	    T.trv_id,
	    T.trv_x,
	    T.trv_y,
	    B.brd_id,
	    B.brd_tt,
	    DBMS_LOB.SUBSTR(B.brd_ct, 4000, 1) brd_ct,
	    MAX(CASE WHEN I.brd_idx = '1' THEN I.brd_img END) AS brd_img1,
	    MAX(CASE WHEN I.brd_idx = '2' THEN I.brd_img END) AS brd_img2,
	    MAX(CASE WHEN I.brd_idx = '3' THEN I.brd_img END) AS brd_img3
	FROM 
	    TRAVEL T
	JOIN 
	    BOARD B ON T.trv_id = B.trv_id
	LEFT JOIN 
	    BOARD_IMG I ON B.brd_id = I.brd_id
	WHERE B.brd_id = #{brdId}
	GROUP BY T.mem_id, T.trv_id, T.trv_pc, T.trv_x, T.trv_y, B.brd_id, B.brd_tt, DBMS_LOB.SUBSTR(B.brd_ct, 4000, 1)
	</select>
	
	<insert id="writeReply" parameterType="ReplyVO">
	INSERT INTO REPLY(brd_id, rpy_id, mem_id, rpy_ct) VALUES(#{brdId}, #{rpyId}, #{memId}, #{rpyCt})
	</insert>
	
	<!-- 단일 댓글 조회 -->
	<select id="getReply" parameterType="String" resultType="ReplyVO">
	SELECT a.rpy_id, a.brd_id, b.mem_nm, b.mem_img, a.rpy_ct, TO_CHAR(a.rpy_dt, 'MM/DD HH24:MI') rpyDt
	FROM reply a, member b
	WHERE a.mem_id = b.mem_id
	AND a.rpy_id = #{rpyId}
	</select>
	
	<!-- 전체 댓글 조회 -->
	<select id="getReplyList" parameterType="int" resultType="ReplyVO">
	SELECT a.rpy_id, b.mem_id, a.brd_id, b.mem_nm, b.mem_img, a.rpy_ct, TO_CHAR(a.rpy_dt, 'MM/DD HH24:MI') rpyDt
	FROM reply a, member b
	WHERE a.mem_id = b.mem_id
	AND a.brd_id = #{brdId}
	ORDER BY rpyDt
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="delReply" parameterType="String">
	DELETE FROM reply
	WHERE rpy_id = #{rpyId}
	</delete>
	
	<!-- 댓글 갯수 카운트 -->
	<select id="cntReply" parameterType="int" resultType="int">
	SELECT COUNT(*)
	FROM reply a, member b
	WHERE a.mem_id = b.mem_id
	AND a.brd_id = #{brdId}
	</select>
	
	<delete id="boardDel" parameterType="int">
	DELETE FROM board WHERE brd_id = #{brdId}
	</delete>
	
	<select id="likesCnt" resultType="int" parameterType="int">
	SELECT COUNT(*)
	FROM board
	LEFT JOIN likes ON board.brd_id = likes.brd_id
	WHERE board.brd_id = #{brdId}
	AND likes.like_yn = 'Y'
	</select>
	
	<select id="likeCk" resultType="int" parameterType="LikeVO">
	SELECT COUNT(*)
	FROM board
	LEFT JOIN likes ON board.brd_id = likes.brd_id
	WHERE board.brd_id = #{brdId}
	AND likes.mem_id = #{memId}
	AND likes.like_yn = 'Y'
	</select>
	
	<insert id="likeAdd" parameterType="LikeVO">
	INSERT INTO LIKES(mem_id, brd_id, like_yn) VALUES(#{memId}, #{brdId}, 'Y')
	</insert>
	
	<delete id="likeDel" parameterType="LikeVO">
	DELETE FROM likes WHERE brd_id = #{brdId} AND mem_id = #{memId}
	</delete>
	
</mapper>